# GitHub Actions 配置文件的名字
name: Build Cherry Studio for Windows

# 触发条件：当手动点击 "Run workflow" 按钮时运行
on:
  workflow_dispatch:

jobs:
  build:
    # 指定运行环境：使用 GitHub 提供的最新版 Windows 虚拟机
    runs-on: windows-latest

    steps:
      # 第1步：获取代码，并明确指定要拉取的分支
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: 'CherryHQ/cherry-studio' # 直接从源仓库拉取
          ref: 'build/windows7-support' # 指定我们关心的分支

      # 第2步：设置 Node.js 环境
      # (Yarn Berry v2+ 需要 Node.js环境来启用 Corepack)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # 第3步：安装项目依赖 (使用Yarn)
      # Yarn Berry (v2+) 通过 Corepack 管理，无需单独安装
      # `yarn install` 会自动读取 .yarnrc.yml 和 package.json 来安装依赖
      - name: Install dependencies with Yarn
        run: yarn install --immutable

      # 第4步：安装 Rust 环境
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # 第5步：打包 Tauri 应用
      # 注意：package.json中的打包命令是 `build`，而不是 `build:win`
      - name: Build the application
        run: yarn build
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      # 第6步：上传打包好的文件
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cherry-studio-windows-installer
          path: |
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/msi/*.msi
